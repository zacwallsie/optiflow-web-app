{"version":3,"file":"static/js/248.25c1e18c.chunk.js","mappings":"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","sources":["components/Breadcrumbs.js","components/HeaderBreadcrumbs.js","sections/@silos/@silos_view/TableViewer.js","sections/@silos/@silos_view/CreateColumnForm.js","sections/@silos/@silos_view/FooterAddRowsConfirmation.js","sections/@silos/@silos_view/FooterAlterRowsConfirmation.js","sections/@silos/@silos_view/DeleteColumnDialog.js","sections/@silos/@silos_view/TableDataViewer.js","pages/silos/silo_view/SiloView.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link, Typography, Breadcrumbs as MUIBreadcrumbs } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nBreadcrumbs.propTypes = {\n  activeLast: PropTypes.bool,\n  links: PropTypes.array.isRequired,\n};\n\nexport default function Breadcrumbs({ links, activeLast = false, ...other }) {\n  const currentLink = links[links.length - 1].name;\n\n  const listDefault = links.map((link) => <LinkItem key={link.name} link={link} />);\n\n  const listActiveLast = links.map((link) => (\n    <div key={link.name}>\n      {link.name !== currentLink ? (\n        <LinkItem link={link} />\n      ) : (\n        <Typography\n          variant=\"body2\"\n          sx={{\n            maxWidth: 260,\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {currentLink}\n        </Typography>\n      )}\n    </div>\n  ));\n\n  return (\n    <MUIBreadcrumbs\n      separator={<Box component=\"span\" sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }} />}\n      {...other}\n    >\n      {activeLast ? listDefault : listActiveLast}\n    </MUIBreadcrumbs>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nLinkItem.propTypes = {\n  link: PropTypes.shape({\n    href: PropTypes.string,\n    icon: PropTypes.any,\n    name: PropTypes.string,\n  }),\n};\n\nfunction LinkItem({ link }) {\n  const { href, name, icon } = link;\n  return (\n    <Link\n      key={name}\n      variant=\"body2\"\n      component={RouterLink}\n      to={href || '#'}\n      sx={{\n        lineHeight: 2,\n        display: 'flex',\n        alignItems: 'center',\n        color: 'text.primary',\n        '& > div': { display: 'inherit' },\n      }}\n    >\n      {icon && <Box sx={{ mr: 1, '& svg': { width: 20, height: 20 } }}>{icon}</Box>}\n      {name}\n    </Link>\n  );\n}\n","import PropTypes from 'prop-types';\n// @mui\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport Breadcrumbs from './Breadcrumbs';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <Breadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {typeof moreLink === 'string' ? (\n          <Link href={moreLink} target=\"_blank\" rel=\"noopener\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import React, { useState, useCallback } from \"react\"\nimport {\n\tTabs,\n\tTab,\n\tBox,\n\tIconButton,\n\tMenu,\n\tMenuItem,\n\tDialog,\n\tDialogTitle,\n\tDialogContent,\n\tDialogActions,\n\tButton,\n\tTextField,\n\ttabsClasses,\n\tTypography,\n} from \"@mui/material\"\nimport AddIcon from \"@mui/icons-material/Add\"\nimport { useParams } from \"react-router-dom\"\nimport axios from \"../../../utils/axios\"\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\"\nimport { useSnackbar } from \"notistack\"\n\nexport default function DataViewer({ Tables, onTableSelect }) {\n\tconst { enqueueSnackbar } = useSnackbar()\n\tconst { siloId } = useParams() // Extract the siloId from URL\n\tconst [tables, setTables] = useState([])\n\n\tconst [currentTab, setCurrentTab] = useState(0)\n\tconst [contextMenu, setContextMenu] = useState(null)\n\tconst [contextTabIndex, setContextTabIndex] = useState(null)\n\tconst [navigationMenu, setNavigationMenu] = useState(null)\n\tconst [renameDialogOpen, setRenameDialogOpen] = useState(false)\n\tconst [newTableName, setNewTableName] = useState(\"\")\n\tconst [deleteDialogOpen, setDeleteDialogOpen] = useState(false)\n\n\tReact.useEffect(() => {\n\t\tif (Tables) {\n\t\t\tsetTables(Tables)\n\t\t}\n\t}, [Tables])\n\n\tconst handleChange = useCallback(\n\t\t(event, newValue) => {\n\t\t\tsetCurrentTab(newValue)\n\t\t\tif (tables && tables.length > newValue) {\n\t\t\t\tonTableSelect(tables[newValue]) // Ensure the table exists before selecting it\n\t\t\t}\n\t\t},\n\t\t[tables, onTableSelect]\n\t) // Dependencies include tables and onTableSelect\n\n\tconst handleAddTable = () => {\n\t\tconst newTable = `Table${tables.length + 1}`\n\t\t// Add new table to the database\n\t\taxios\n\t\t\t.post(`/api/v1/silos/${siloId}/tables/`, { table_name: newTable })\n\t\t\t.then((response) => {\n\t\t\t\tconst updatedTables = [...tables, newTable] // Update state to include new table\n\t\t\t\tsetTables(updatedTables)\n\t\t\t\tsetCurrentTab(updatedTables.length - 1) // Set the current tab to the new table\n\t\t\t\tonTableSelect(newTable) // Call the onTableSelect with the new table name\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error creating table:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Create Table - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tconst handleRightClick = (event, index) => {\n\t\tevent.preventDefault()\n\t\tsetContextTabIndex(index)\n\t\tsetContextMenu(contextMenu === null ? { mouseX: event.clientX - 2, mouseY: event.clientY + 4 } : null)\n\t}\n\n\tconst handleClose = () => {\n\t\tsetContextMenu(null)\n\t\tsetNavigationMenu(null)\n\t\tsetRenameDialogOpen(false)\n\t\tsetDeleteDialogOpen(false)\n\t}\n\n\tconst handleRemoveTable = () => {\n\t\tconst tableToDelete = tables[contextTabIndex]\n\t\t// Remove table from the database\n\t\taxios\n\t\t\t.delete(`/api/v1/silos/${siloId}/tables/${tableToDelete}`)\n\t\t\t.then((response) => {\n\t\t\t\tconst filteredTables = tables.filter((_, index) => index !== contextTabIndex)\n\t\t\t\tsetTables(filteredTables)\n\t\t\t\tsetCurrentTab(Math.min(currentTab, filteredTables.length - 1))\n\t\t\t\tonTableSelect(tables[currentTab]) // Call the onTableSelect with the new table name\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error deleting table:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Delete Table - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t\thandleClose()\n\t}\n\n\tconst openNavigationMenu = (event) => {\n\t\tsetNavigationMenu(event.currentTarget)\n\t}\n\n\tconst handleNavigation = (index) => {\n\t\tsetCurrentTab(index)\n\t\thandleClose()\n\t}\n\n\tconst openRenameDialog = () => {\n\t\thandleClose()\n\t\tsetRenameDialogOpen(true)\n\t\tsetNewTableName(tables[contextTabIndex])\n\t}\n\n\tconst handleRenameTable = () => {\n\t\tconst tableToRename = tables[contextTabIndex]\n\t\taxios\n\t\t\t.patch(`/api/v1/silos/${siloId}/tables/${tableToRename}/`, { table_name: newTableName })\n\t\t\t.then((response) => {\n\t\t\t\tconst updatedTables = tables.map((table, index) => {\n\t\t\t\t\tif (index === contextTabIndex) {\n\t\t\t\t\t\treturn newTableName\n\t\t\t\t\t}\n\t\t\t\t\treturn table\n\t\t\t\t})\n\t\t\t\tsetTables(updatedTables)\n\t\t\t\tsetRenameDialogOpen(false)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error renaming table:\", error.detail || error)\n\t\t\t\tenqueueSnackbar(\"Failed to Rename Table - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tconst openDeleteDialog = () => {\n\t\thandleClose()\n\t\tsetDeleteDialogOpen(true)\n\t}\n\n\treturn (\n\t\t<Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n\t\t\t<IconButton onClick={handleAddTable} disableRipple>\n\t\t\t\t<AddIcon />\n\t\t\t</IconButton>\n\t\t\t<IconButton onClick={openNavigationMenu} disableRipple disabled={tables.length === 0}>\n\t\t\t\t<MoreVertIcon />\n\t\t\t</IconButton>\n\t\t\t<Tabs\n\t\t\t\tvalue={currentTab}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tvariant=\"scrollable\"\n\t\t\t\tscrollButtons\n\t\t\t\tsx={{\n\t\t\t\t\t[`& .${tabsClasses.scrollButtons}`]: {\n\t\t\t\t\t\t\"&.Mui-disabled\": { opacity: 0.3 },\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{tables.map((table, index) => (\n\t\t\t\t\t<Tab key={table} label={table} onContextMenu={(event) => handleRightClick(event, index)} disableRipple />\n\t\t\t\t))}\n\t\t\t</Tabs>\n\t\t\t<Menu\n\t\t\t\topen={contextMenu !== null}\n\t\t\t\tonClose={handleClose}\n\t\t\t\tanchorReference=\"anchorPosition\"\n\t\t\t\tanchorPosition={contextMenu !== null ? { top: contextMenu.mouseY, left: contextMenu.mouseX } : undefined}\n\t\t\t>\n\t\t\t\t<MenuItem onClick={openDeleteDialog}>Remove</MenuItem>\n\t\t\t\t<MenuItem onClick={openRenameDialog}>Rename</MenuItem>\n\t\t\t</Menu>\n\t\t\t<Menu\n\t\t\t\topen={Boolean(navigationMenu)}\n\t\t\t\tonClose={handleClose}\n\t\t\t\tanchorEl={navigationMenu}\n\t\t\t\tPaperProps={{\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\tmaxHeight: \"20vh\",\n\t\t\t\t\t\toverflow: \"auto\",\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{tables.map((table, index) => (\n\t\t\t\t\t<MenuItem key={table} onClick={() => handleNavigation(index)} disableRipple>\n\t\t\t\t\t\t{table}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</Menu>\n\t\t\t<Dialog open={deleteDialogOpen} onClose={handleClose}>\n\t\t\t\t<DialogTitle>Confirm Deletion</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<Typography>Are you sure you want to delete this table?</Typography>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleClose}>Cancel</Button>\n\t\t\t\t\t<Button onClick={handleRemoveTable} color=\"error\">\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<Dialog open={renameDialogOpen} onClose={handleClose}>\n\t\t\t\t<DialogTitle>Rename Table</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tvariant=\"standard\"\n\t\t\t\t\t\tvalue={newTableName}\n\t\t\t\t\t\tonChange={(e) => setNewTableName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleClose}>Cancel</Button>\n\t\t\t\t\t<Button onClick={handleRenameTable}>Save</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</Box>\n\t)\n}\n","import React from \"react\"\nimport {\n\tButton,\n\tDialog,\n\tDialogActions,\n\tDialogContent,\n\tDialogTitle,\n\tTextField,\n\tCheckbox,\n\tFormControlLabel,\n\tFormGroup,\n\tFormControl,\n\tInputLabel,\n\tSelect,\n\tMenuItem,\n\tCollapse,\n} from \"@mui/material\"\nimport { useForm, Controller } from \"react-hook-form\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport * as yup from \"yup\"\nimport axios from \"../../../utils/axios\" // Ensure correct path\nimport { useSnackbar } from \"notistack\"\n\nconst postgresDataTypes = [\"bigint\", \"boolean\", \"date\", \"integer\", \"numeric\", \"real\", \"smallint\", \"text\", \"timestamp\", \"uuid\", \"varchar\"]\n\n// Define the validation schema using Yup\nconst columnSchema = yup.object({\n\tcolumnName: yup.string().required(\"Column name is required\"),\n\tdataType: yup.string().required(\"Data type is required\"),\n\tdefaultVal: yup.string(),\n\tcheckConstraint: yup.string(),\n\tcreateIndex: yup.boolean(),\n\tcollation: yup.string(),\n})\n\nfunction CreateColumnForm({ open, handleClose, tableName, siloId }) {\n\tconst { enqueueSnackbar } = useSnackbar()\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tcontrol,\n\t\tformState: { errors },\n\t\treset,\n\t} = useForm({\n\t\tresolver: yupResolver(columnSchema),\n\t\tdefaultValues: {\n\t\t\tcolumnName: \"\",\n\t\t\tdataType: postgresDataTypes[0],\n\t\t\tdefaultVal: \"\",\n\t\t\tcheckConstraint: \"\",\n\t\t\tcreateIndex: false,\n\t\t\tcollation: \"\",\n\t\t},\n\t})\n\tconst [showAdvanced, setShowAdvanced] = React.useState(false)\n\n\tconst handleToggleAdvanced = () => {\n\t\tsetShowAdvanced(!showAdvanced)\n\t}\n\n\tconst onSubmit = async (data) => {\n\t\taxios\n\t\t\t.post(`/api/v1/silos/${siloId}/tables/${tableName}/columns/`, data)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"Column added successfully:\", response.data)\n\t\t\t\thandleClose()\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error fetching table names:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Add Column - \" + (error?.detail || \"Unknown Error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\treturn (\n\t\t<Dialog\n\t\t\topen={open}\n\t\t\tonClose={() => {\n\t\t\t\thandleClose()\n\t\t\t\treset()\n\t\t\t}}\n\t\t>\n\t\t\t<DialogTitle>Add New Column to {tableName}</DialogTitle>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\tid=\"columnName\"\n\t\t\t\t\t\tlabel=\"Column Name *\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\terror={!!errors.columnName}\n\t\t\t\t\t\thelperText={errors.columnName?.message}\n\t\t\t\t\t\t{...register(\"columnName\")}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormControl fullWidth margin=\"dense\" error={!!errors.dataType}>\n\t\t\t\t\t\t<InputLabel id=\"data-type-label\">Data Type *</InputLabel>\n\t\t\t\t\t\t<Controller\n\t\t\t\t\t\t\tname=\"dataType\"\n\t\t\t\t\t\t\tcontrol={control}\n\t\t\t\t\t\t\trender={({ field, fieldState: { error } }) => (\n\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t{...field}\n\t\t\t\t\t\t\t\t\tlabelId=\"data-type-label\"\n\t\t\t\t\t\t\t\t\tid=\"data-type-select\"\n\t\t\t\t\t\t\t\t\tlabel=\"Data Type\"\n\t\t\t\t\t\t\t\t\tMenuProps={{ PaperProps: { style: { maxHeight: 200 } } }}\n\t\t\t\t\t\t\t\t\terror={!!error}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{postgresDataTypes.map((type) => (\n\t\t\t\t\t\t\t\t\t\t<MenuItem key={type} value={type}>\n\t\t\t\t\t\t\t\t\t\t\t{type}\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.dataType && <p style={{ color: \"#f44336\", margin: \"3px 14px\", fontSize: \"0.75rem\" }}>{errors.dataType.message}</p>}\n\t\t\t\t\t</FormControl>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<FormControlLabel control={<Checkbox {...register(\"isUnique\")} />} label=\"Unique\" />\n\t\t\t\t\t\t<FormControlLabel control={<Checkbox {...register(\"isNullable\")} />} label=\"Nullable\" />\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<Button onClick={handleToggleAdvanced} color=\"primary\" sx={{ marginTop: \"20px\" }}>\n\t\t\t\t\t\t{showAdvanced ? \"Hide Advanced Options\" : \"Show Advanced Options\"}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Collapse in={showAdvanced}>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\t\tid=\"default-value\"\n\t\t\t\t\t\t\tlabel=\"Default Value\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t{...register(\"defaultVal\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\t\tid=\"check-constraint\"\n\t\t\t\t\t\t\tlabel=\"Check Constraint\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t{...register(\"checkConstraint\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormControlLabel control={<Checkbox {...register(\"createIndex\")} />} label=\"Create Index\" />\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\t\tid=\"collation\"\n\t\t\t\t\t\t\tlabel=\"Collation\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t{...register(\"collation\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Collapse>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\thandleClose()\n\t\t\t\t\t\t\treset()\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"submit\" color=\"primary\">\n\t\t\t\t\t\tAdd Column\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</form>\n\t\t</Dialog>\n\t)\n}\n\nexport default CreateColumnForm\n","import React from \"react\"\nimport { AppBar, Toolbar, Button, Box } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\n\nconst CustomAppBar = styled(AppBar)(({ theme }) => ({\n\ttop: \"auto\",\n\tbottom: 0,\n\theight: \"65px\",\n}))\n\nconst CustomToolbar = styled(Toolbar)(({ theme }) => ({\n\tjustifyContent: \"flex-end\",\n\tpaddingRight: theme.spacing(2),\n}))\n\nexport default function FooterAddRowsConfirmation({ open, onConfirm, onCancel }) {\n\tif (!open) return null\n\n\treturn (\n\t\t<CustomAppBar position=\"fixed\" color=\"default\">\n\t\t\t<CustomToolbar>\n\t\t\t\t<Box sx={{ flexGrow: 1 }}></Box>\n\t\t\t\t<Button sx={{ marginLeft: 1 }} onClick={onConfirm}>\n\t\t\t\t\tConfirm Added Row\n\t\t\t\t</Button>\n\t\t\t\t<Button sx={{ marginLeft: 1 }} onClick={onCancel}>\n\t\t\t\t\tRemove Added Row\n\t\t\t\t</Button>\n\t\t\t</CustomToolbar>\n\t\t</CustomAppBar>\n\t)\n}\n","import React from \"react\"\nimport { AppBar, Toolbar, Button, Box } from \"@mui/material\"\nimport { styled } from \"@mui/material/styles\"\n\nconst CustomAppBar = styled(AppBar)(({ theme }) => ({\n\ttop: \"auto\",\n\tbottom: 0,\n\theight: \"65px\",\n}))\n\nconst CustomToolbar = styled(Toolbar)(({ theme }) => ({\n\tjustifyContent: \"flex-end\",\n\tpaddingRight: theme.spacing(2),\n}))\n\nexport default function FooterAlterRowsConfirmation({ open, onConfirm, onCancel }) {\n\tif (!open) return null\n\n\treturn (\n\t\t<CustomAppBar position=\"fixed\" color=\"default\">\n\t\t\t<CustomToolbar>\n\t\t\t\t<Box sx={{ flexGrow: 1 }}></Box>\n\t\t\t\t<Button sx={{ marginLeft: 1 }} onClick={onConfirm}>\n\t\t\t\t\tConfirm Changes\n\t\t\t\t</Button>\n\t\t\t\t<Button sx={{ marginLeft: 1 }} onClick={onCancel}>\n\t\t\t\t\tCancel Changes\n\t\t\t\t</Button>\n\t\t\t</CustomToolbar>\n\t\t</CustomAppBar>\n\t)\n}\n","import React from \"react\"\nimport { Button, Dialog, Typography, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, MenuItem, Select } from \"@mui/material\"\nimport { useSnackbar } from \"notistack\"\nimport axios from \"../../../utils/axios\"\n\nfunction DeleteColumnDialog({ open, handleClose, columns, tableName, siloId }) {\n\tconst { enqueueSnackbar } = useSnackbar()\n\tconst [selectedColumn, setSelectedColumn] = React.useState(\"\")\n\n\tconst handleDelete = async () => {\n\t\taxios\n\t\t\t.delete(`/api/v1/silos/${siloId}/tables/${tableName}/columns/${selectedColumn}/`)\n\t\t\t.then((response) => {\n\t\t\t\tenqueueSnackbar(\"Column Deleted Successfully\", { variant: \"success\" })\n\t\t\t\tsetSelectedColumn(\"\")\n\t\t\t\thandleClose(true) // pass true to signal that a column was deleted\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error deleting column -\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Delete Column - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t\thandleClose(false)\n\t\t\t})\n\t}\n\n\treturn (\n\t\t<Dialog open={open} onClose={() => handleClose(false)} aria-labelledby=\"delete-column-dialog-title\">\n\t\t\t<DialogTitle id=\"delete-column-dialog-title\">Delete Column</DialogTitle>\n\t\t\t<DialogContent dividers>\n\t\t\t\t<Typography gutterBottom>\n\t\t\t\t\tSelect a column to delete from <strong>{tableName}</strong>. This action cannot be undone.\n\t\t\t\t</Typography>\n\t\t\t\t<FormControl fullWidth margin=\"normal\">\n\t\t\t\t\t<InputLabel id=\"delete-column-select-label\">Column</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlabelId=\"delete-column-select-label\"\n\t\t\t\t\t\tid=\"delete-column-select\"\n\t\t\t\t\t\tvalue={selectedColumn}\n\t\t\t\t\t\tonChange={(e) => setSelectedColumn(e.target.value)}\n\t\t\t\t\t\tlabel=\"Column\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t<MenuItem key={column.field} value={column.field}>\n\t\t\t\t\t\t\t\t{column.headerName}\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</DialogContent>\n\t\t\t<DialogActions>\n\t\t\t\t<Button onClick={() => handleClose(false)} color=\"primary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={handleDelete} color=\"secondary\" disabled={!selectedColumn}>\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t</DialogActions>\n\t\t</Dialog>\n\t)\n}\n\nexport default DeleteColumnDialog\n","import React, { useState } from \"react\"\nimport {\n\tDataGrid,\n\tGridToolbarContainer,\n\tGridToolbarFilterButton,\n\tGridToolbarExport,\n\tuseGridApiRef,\n\tGridValidRowModel,\n\tGridRowId,\n\tGridColDef,\n} from \"@mui/x-data-grid\"\nimport { Button, IconButton } from \"@mui/material\"\nimport RestoreIcon from \"@mui/icons-material/Restore\"\nimport LoadingButton from \"@mui/lab/LoadingButton\"\nimport SaveIcon from \"@mui/icons-material/Save\"\nimport DeleteIcon from \"@mui/icons-material/Delete\"\nimport { styled } from \"@mui/material/styles\"\nimport { darken } from \"@mui/material/styles\"\nimport { useSnackbar } from \"notistack\"\nimport { useParams } from \"react-router-dom\"\nimport axios from \"../../../utils/axios\"\nimport CreateColumnForm from \"./CreateColumnForm\"\nimport FooterAddRowsConfirmation from \"./FooterAddRowsConfirmation\"\nimport FooterAlterRowsConfirmation from \"./FooterAlterRowsConfirmation\"\nimport DeleteColumnDialog from \"./DeleteColumnDialog\"\n\nconst StyledButton = styled(Button)(({ theme }) => ({\n\tmargin: theme.spacing(1),\n}))\n\nfunction CustomToolbar({ onAddRow, onOpenColumnDialog, onOpenDeleteColumnDialog, disableToolBarButtons, onDeleteRows, selectedRowCount }) {\n\treturn (\n\t\t<GridToolbarContainer>\n\t\t\t<GridToolbarExport printOptions={{ disableToolbarButton: true }} />\n\t\t\t<GridToolbarFilterButton />\n\t\t\t<StyledButton\n\t\t\t\tonClick={onOpenColumnDialog}\n\t\t\t\tcolor=\"secondary\"\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tdisabled={disableToolBarButtons} // Disable based on the prop\n\t\t\t>\n\t\t\t\tAdd Column\n\t\t\t</StyledButton>\n\t\t\t<StyledButton onClick={onOpenDeleteColumnDialog} color=\"secondary\" variant=\"contained\" disabled={disableToolBarButtons}>\n\t\t\t\tRemove Column\n\t\t\t</StyledButton>\n\t\t\t<StyledButton onClick={onAddRow} color=\"secondary\" variant=\"contained\" disabled={disableToolBarButtons}>\n\t\t\t\tAdd Row\n\t\t\t</StyledButton>\n\t\t\t{selectedRowCount > 0 && (\n\t\t\t\t<IconButton onClick={onDeleteRows} color=\"error\">\n\t\t\t\t\t<DeleteIcon />\n\t\t\t\t</IconButton>\n\t\t\t)}\n\t\t</GridToolbarContainer>\n\t)\n}\n\nexport default function TableDataViewer({ selectedTableName }) {\n\tconst { enqueueSnackbar } = useSnackbar()\n\tconst { siloId } = useParams() // Extract the siloId from URL\n\tconst [rows, setRows] = useState([])\n\tconst [newRow, setNewRow] = useState(null)\n\tconst [columns, setColumns] = useState([])\n\tconst [isAddColumnDialogOpen, setIsAddColumnDialogOpen] = useState(false)\n\tconst [openPendingRowBar, setOpenPendingRowBar] = useState(false)\n\tconst [isDeleteColumnDialogOpen, setIsDeleteColumnDialogOpen] = React.useState(false)\n\tconst [hasUnsavedRows, setHasUnsavedRows] = React.useState(false)\n\tconst [isSaving, setIsSaving] = React.useState(false)\n\tconst [selected, setSelected] = useState([])\n\tconst unsavedChangesRef = React.useRef({\n\t\tunsavedRows: {},\n\t\trowsBeforeChange: {},\n\t})\n\tconst apiRef = useGridApiRef()\n\n\t// Getting Table Rows\n\tconst fetchTableRows = async (tableName) => {\n\t\taxios\n\t\t\t.get(`/api/v1/silos/${siloId}/tables/${tableName}/rows/`)\n\t\t\t.then((response) => {\n\t\t\t\tsetRows(response.data.rows)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error fetching table names:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Fetch Table Rows - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\t// Getting Table Columns\n\tconst fetchTableColumns = async (tableName) => {\n\t\taxios\n\t\t\t.get(`/api/v1/silos/${siloId}/tables/${tableName}/columns/`)\n\t\t\t.then((response) => {\n\t\t\t\tconst fetchedColumns = response.data.columns.map((col) => ({\n\t\t\t\t\t...col,\n\t\t\t\t\teditable: col.field !== \"id\", // Make 'id' field not editable\n\t\t\t\t}))\n\t\t\t\tsetColumns(fetchedColumns)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error fetching table columns:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Fetch Table Columns - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\t// Function to fetch rows and columns\n\tconst fetchData = async (selectedTableName) => {\n\t\tfetchTableRows(selectedTableName)\n\t\tfetchTableColumns(selectedTableName)\n\t}\n\n\t// Fetching table data based on the tableName prop\n\tReact.useEffect(() => {\n\t\tif (selectedTableName) {\n\t\t\tfetchData(selectedTableName)\n\t\t}\n\t}, [selectedTableName]) // Dependency array includes selectedTableName\n\n\tconst processRowUpdate = (newRow, oldRow) => {\n\t\tconst rowId = newRow.id\n\t\tunsavedChangesRef.current.unsavedRows[rowId] = newRow\n\t\tif (!unsavedChangesRef.current.rowsBeforeChange[rowId]) {\n\t\t\tunsavedChangesRef.current.rowsBeforeChange[rowId] = oldRow\n\t\t}\n\t\tsetHasUnsavedRows(Object.keys(unsavedChangesRef.current.unsavedRows).length > 0)\n\t\treturn newRow\n\t}\n\tconst confirmChanges = async () => {\n\t\tconst updatedRows = Object.values(unsavedChangesRef.current.unsavedRows)\n\t\tsetIsSaving(true)\n\t\ttry {\n\t\t\tawait axios.patch(`/api/v1/silos/${siloId}/tables/${selectedTableName}/rows`, {\n\t\t\t\trows: updatedRows.map((row) => ({\n\t\t\t\t\tid: row.id,\n\t\t\t\t\tcolumns: { ...row },\n\t\t\t\t})),\n\t\t\t})\n\t\t\tenqueueSnackbar(\"Rows Updated Successfully\", { variant: \"success\" })\n\t\t\tsetHasUnsavedRows(false)\n\t\t\tunsavedChangesRef.current = { unsavedRows: {}, rowsBeforeChange: {} }\n\t\t\tsetOpenPendingRowBar(false)\n\t\t\tsetIsSaving(false)\n\t\t} catch (error) {\n\t\t\tenqueueSnackbar(\"Failed to update rows - \" + (error.response?.data?.detail || \"Unknown error\"), { variant: \"error\" })\n\t\t\tsetIsSaving(false)\n\t\t}\n\t}\n\tconst cancelChanges = () => {\n\t\t// Revert changes locally\n\t\tapiRef.current.updateRows(Object.values(unsavedChangesRef.current.rowsBeforeChange))\n\t\tunsavedChangesRef.current = {\n\t\t\tunsavedRows: {},\n\t\t\trowsBeforeChange: {},\n\t\t}\n\t\tsetHasUnsavedRows(false)\n\t}\n\n\tconst hasPendingRows = newRow != null // Check if there are new rows pending confirmation\n\n\tconst handleOpenDialog = () => setIsAddColumnDialogOpen(true)\n\tconst handleCloseDialog = (refresh = false) => {\n\t\tsetIsAddColumnDialogOpen(false)\n\t\tfetchData(selectedTableName)\n\t}\n\n\tconst handleOpenDeleteColumnDialog = () => {\n\t\tsetIsDeleteColumnDialogOpen(true)\n\t}\n\tconst handleCloseDeleteColumnDialog = (deleted) => {\n\t\tsetIsDeleteColumnDialogOpen(false)\n\t\tif (deleted) {\n\t\t\t// Refresh your columns list or handle state update as necessary\n\t\t\tfetchData(selectedTableName)\n\t\t}\n\t}\n\n\tconst handleAddRow = () => {\n\t\t// Incremental ID based on existing row count\n\t\tconst newId = rows.length + 1\n\t\tconst newRow = {\n\t\t\tid: newId, // Assign the new incremental ID\n\t\t\t...columns.reduce((acc, column) => {\n\t\t\t\tif (column.field !== \"id\") {\n\t\t\t\t\tacc[column.field] = \"\" // Initialize other fields as empty or with default values\n\t\t\t\t}\n\t\t\t\treturn acc\n\t\t\t}, {}),\n\t\t}\n\n\t\tsetNewRow(newRow) // As only one new row can be added at a time, reset to the new one\n\t\tsetRows([...rows, newRow])\n\t\tsetOpenPendingRowBar(true) // Show the confirmation bar\n\t}\n\n\tconst confirmNewRow = async () => {\n\t\tsetIsSaving(true)\n\t\t// Post only the new rows\n\t\taxios\n\t\t\t.post(`/api/v1/silos/${siloId}/tables/${selectedTableName}/rows/`, { columns: newRow })\n\t\t\t.then((response) => {\n\t\t\t\tsetNewRow(null)\n\t\t\t\tsetOpenPendingRowBar(false)\n\t\t\t\tsetIsSaving(false)\n\t\t\t\tenqueueSnackbar(\"Row Added Successfully!\", { variant: \"success\" })\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error adding rows:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Add Rows - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t\tsetIsSaving(false)\n\t\t\t})\n\t}\n\n\tconst cancelNewRow = () => {\n\t\tsetRows(rows.filter((row) => row.id !== newRow.id)) // Remove the new row that was not confirmed\n\t\tsetNewRow(null)\n\t\tsetOpenPendingRowBar(false)\n\t}\n\n\tconst handleDeleteRows = async () => {\n\t\tif (selected.length > 0) {\n\t\t\tsetIsSaving(true)\n\t\t\taxios\n\t\t\t\t.post(`/api/v1/silos/${siloId}/tables/${selectedTableName}/rows/batch/delete/`, { row_ids: selected })\n\t\t\t\t.then((response) => {\n\t\t\t\t\tsetRows(rows.filter((row) => !selected.includes(row.id)))\n\t\t\t\t\tsetSelected([])\n\t\t\t\t\tenqueueSnackbar(\"Rows Deleted Successfully!\", { variant: \"success\" })\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.error(\"Error deleting silos:\", error)\n\t\t\t\t\tenqueueSnackbar(\"Failed to Delete Rows - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tsetIsSaving(false)\n\t\t\t\t})\n\t\t}\n\t}\n\n\treturn (\n\t\t<div style={{ height: \"100%\", width: \"100%\" }}>\n\t\t\t<DataGrid\n\t\t\t\trows={rows}\n\t\t\t\tcolumns={columns}\n\t\t\t\tapiRef={apiRef}\n\t\t\t\tcheckboxSelection\n\t\t\t\tgetRowId={(row) => row.id}\n\t\t\t\tdisableSelectionOnClick\n\t\t\t\tprocessRowUpdate={processRowUpdate}\n\t\t\t\tignoreValueFormatterDuringExport\n\t\t\t\tonSelectionModelChange={(newSelection) => {\n\t\t\t\t\tsetSelected(newSelection)\n\t\t\t\t}}\n\t\t\t\tsx={{\n\t\t\t\t\t\"& .MuiDataGrid-columnHeaders\": {\n\t\t\t\t\t\ttextTransform: \"none\", // Ensure text is not transformed\n\t\t\t\t\t},\n\t\t\t\t\t\"& .MuiDataGrid-columnHeaderTitle\": {\n\t\t\t\t\t\ttextTransform: \"none\", // Specifically targeting the title text\n\t\t\t\t\t},\n\t\t\t\t\t\"& .MuiDataGrid-row.row--removed\": {\n\t\t\t\t\t\tbackgroundColor: (theme) => {\n\t\t\t\t\t\t\tif (theme.palette.mode === \"light\") {\n\t\t\t\t\t\t\t\treturn \"rgba(255, 170, 170, 0.3)\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn darken(\"rgba(255, 170, 170, 1)\", 0.7)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\"& .MuiDataGrid-row.row--edited\": {\n\t\t\t\t\t\tbackgroundColor: (theme) => {\n\t\t\t\t\t\t\tif (theme.palette.mode === \"light\") {\n\t\t\t\t\t\t\t\treturn \"rgba(255, 254, 176, 0.3)\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn darken(\"rgba(255, 254, 176, 1)\", 0.6)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tbackgroundColor: \"background.default\",\n\t\t\t\t}}\n\t\t\t\tcomponents={{\n\t\t\t\t\tToolbar: () => (\n\t\t\t\t\t\t<CustomToolbar\n\t\t\t\t\t\t\tonAddRow={handleAddRow}\n\t\t\t\t\t\t\tonOpenColumnDialog={handleOpenDialog}\n\t\t\t\t\t\t\tonOpenDeleteColumnDialog={handleOpenDeleteColumnDialog}\n\t\t\t\t\t\t\tdisableToolBarButtons={hasPendingRows}\n\t\t\t\t\t\t\tonDeleteRows={handleDeleteRows}\n\t\t\t\t\t\t\tselectedRowCount={selected.length}\n\t\t\t\t\t\t/>\n\t\t\t\t\t),\n\t\t\t\t}}\n\t\t\t\tloading={isSaving}\n\t\t\t\tgetRowClassName={({ id }) => {\n\t\t\t\t\tconst unsavedRow = unsavedChangesRef.current.unsavedRows[id]\n\t\t\t\t\tif (unsavedRow) {\n\t\t\t\t\t\tif (unsavedRow._action === \"delete\") {\n\t\t\t\t\t\t\treturn \"row--removed\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn \"row--edited\"\n\t\t\t\t\t}\n\t\t\t\t\treturn \"\"\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<CreateColumnForm open={isAddColumnDialogOpen} handleClose={handleCloseDialog} tableName={selectedTableName} siloId={siloId} />\n\t\t\t<FooterAddRowsConfirmation open={openPendingRowBar} onConfirm={confirmNewRow} onCancel={cancelNewRow} />\n\t\t\t{hasUnsavedRows && <FooterAlterRowsConfirmation open={hasUnsavedRows} onConfirm={confirmChanges} onCancel={cancelChanges} />}\n\t\t\t<DeleteColumnDialog\n\t\t\t\topen={isDeleteColumnDialogOpen}\n\t\t\t\thandleClose={handleCloseDeleteColumnDialog}\n\t\t\t\tcolumns={columns}\n\t\t\t\ttableName={selectedTableName}\n\t\t\t\tsiloId={siloId}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React, { useEffect, useState, useCallback } from \"react\"\nimport { Box, Container } from \"@mui/material\"\nimport { useParams } from \"react-router-dom\"\nimport axios from \"../../../utils/axios\"\nimport { useSnackbar } from \"notistack\"\n\nimport Page from \"../../../components/Page\"\nimport HeaderBreadcrumbs from \"../../../components/HeaderBreadcrumbs\"\nimport { TableDataViewer, TableViewer } from \"../../../sections/@silos/@silos_view/index\"\n\nexport default function SiloView() {\n\tconst { enqueueSnackbar } = useSnackbar()\n\tconst { siloId } = useParams()\n\tconst [silo, setSilo] = useState([])\n\tconst [tables, setTables] = useState([])\n\tconst [currentTab, setCurrentTab] = useState(\"\")\n\n\t// Getting Silo Details\n\tconst fetchSiloDetails = (silo_id) => {\n\t\taxios\n\t\t\t.get(`/api/v1/silos/${silo_id}`)\n\t\t\t.then((response) => {\n\t\t\t\tsetSilo(response.data)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error fetching silo details:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Fetch Silo: \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\t// Getting Silo Tables\n\tconst fetchTableNames = (silo_id) => {\n\t\taxios\n\t\t\t.get(`/api/v1/silos/${silo_id}/tables/`)\n\t\t\t.then((response) => {\n\t\t\t\tsetTables(response.data.tables)\n\t\t\t\t// Automatically select the first table as the current tab if not already selected\n\t\t\t\tif (response.data.tables.length && !currentTab) {\n\t\t\t\t\tsetCurrentTab(response.data.tables[0])\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(\"Error fetching table names:\", error)\n\t\t\t\tenqueueSnackbar(\"Failed to Fetch Tables - \" + (error?.detail || \"Unknown error\"), {\n\t\t\t\t\tvariant: \"error\",\n\t\t\t\t\tautoHideDuration: 4000,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tfetchSiloDetails(siloId)\n\t\tfetchTableNames(siloId)\n\t}, [siloId])\n\n\treturn (\n\t\t<Page title={silo.silo_name || \"OptiFlow\"}>\n\t\t\t<Container maxWidth=\"false\">\n\t\t\t\t<HeaderBreadcrumbs\n\t\t\t\t\theading={silo.silo_name || \"Data Silo\"}\n\t\t\t\t\tlinks={[\n\t\t\t\t\t\t{ name: \"All Silos\", href: \"/flow/silos\" },\n\t\t\t\t\t\t...(silo.silo_name ? [{ name: silo.silo_name, href: \"\", isActive: true }] : []),\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Box display=\"flex\" flexDirection=\"column\" height=\"86vh\">\n\t\t\t\t<Box flex={1} sx={{ overflow: \"auto\" }}>\n\t\t\t\t\t<TableDataViewer selectedTableName={currentTab} />\n\t\t\t\t</Box>\n\t\t\t\t<Box height=\"50px\" width=\"100%\">\n\t\t\t\t\t<TableViewer Tables={tables} onTableSelect={setCurrentTab} />\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t</Page>\n\t)\n}\n"],"names":["Breadcrumbs","links","activeLast","other","currentLink","length","name","listDefault","map","link","LinkItem","listActiveLast","Typography","variant","sx","maxWidth","overflow","whiteSpace","color","textOverflow","separator","Box","component","width","height","borderRadius","bgcolor","href","icon","Link","RouterLink","to","lineHeight","display","alignItems","mr","HeaderBreadcrumbs","action","heading","moreLink","mb","flexGrow","gutterBottom","flexShrink","mt","target","rel","noWrap","DataViewer","Tables","onTableSelect","enqueueSnackbar","useSnackbar","siloId","useParams","tables","setTables","useState","currentTab","setCurrentTab","contextMenu","setContextMenu","contextTabIndex","setContextTabIndex","navigationMenu","setNavigationMenu","renameDialogOpen","setRenameDialogOpen","newTableName","setNewTableName","deleteDialogOpen","setDeleteDialogOpen","React","handleChange","useCallback","event","newValue","handleClose","IconButton","onClick","newTable","axios","table_name","then","response","updatedTables","catch","error","console","detail","autoHideDuration","disableRipple","Add","currentTarget","disabled","MoreVert","Tabs","value","onChange","scrollButtons","tabsClasses","opacity","table","index","Tab","label","onContextMenu","preventDefault","mouseX","clientX","mouseY","clientY","handleRightClick","Menu","open","onClose","anchorReference","anchorPosition","top","left","undefined","MenuItem","Boolean","anchorEl","PaperProps","style","maxHeight","handleNavigation","Dialog","DialogTitle","DialogContent","DialogActions","Button","tableToDelete","filteredTables","filter","_","Math","min","TextField","autoFocus","margin","id","type","fullWidth","autoComplete","e","tableToRename","postgresDataTypes","columnSchema","yup","columnName","required","dataType","defaultVal","checkConstraint","createIndex","collation","tableName","register","handleSubmit","control","formState","errors","reset","useForm","resolver","yupResolver","defaultValues","showAdvanced","setShowAdvanced","onSubmit","async","data","log","helperText","message","FormControl","InputLabel","render","field","fieldState","Select","labelId","MenuProps","fontSize","FormGroup","FormControlLabel","Checkbox","marginTop","Collapse","in","CustomAppBar","styled","AppBar","theme","bottom","CustomToolbar","Toolbar","justifyContent","paddingRight","spacing","FooterAddRowsConfirmation","onConfirm","onCancel","position","marginLeft","FooterAlterRowsConfirmation","columns","selectedColumn","setSelectedColumn","dividers","column","headerName","StyledButton","onAddRow","onOpenColumnDialog","onOpenDeleteColumnDialog","disableToolBarButtons","onDeleteRows","selectedRowCount","GridToolbarContainer","GridToolbarExport","printOptions","disableToolbarButton","GridToolbarFilterButton","Delete","TableDataViewer","selectedTableName","rows","setRows","newRow","setNewRow","setColumns","isAddColumnDialogOpen","setIsAddColumnDialogOpen","openPendingRowBar","setOpenPendingRowBar","isDeleteColumnDialogOpen","setIsDeleteColumnDialogOpen","hasUnsavedRows","setHasUnsavedRows","isSaving","setIsSaving","selected","setSelected","unsavedChangesRef","unsavedRows","rowsBeforeChange","apiRef","useGridApiRef","fetchData","fetchTableRows","fetchedColumns","col","editable","fetchTableColumns","hasPendingRows","handleOpenDialog","handleOpenDeleteColumnDialog","handleAddRow","reduce","acc","handleDeleteRows","row_ids","row","includes","finally","DataGrid","checkboxSelection","getRowId","disableSelectionOnClick","processRowUpdate","oldRow","rowId","current","Object","keys","ignoreValueFormatterDuringExport","onSelectionModelChange","newSelection","textTransform","backgroundColor","palette","mode","darken","components","loading","getRowClassName","unsavedRow","_action","updatedRows","values","updateRows","deleted","SiloView","silo","setSilo","useEffect","silo_id","fetchTableNames","Page","title","silo_name","Container","isActive","flexDirection","flex"],"sourceRoot":""}