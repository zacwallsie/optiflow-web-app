{"version":3,"file":"static/js/758.23bb9a97.chunk.js","mappings":"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","sources":["components/Breadcrumbs.js","components/HeaderBreadcrumbs.js","sections/@databases/@databases_view/DatabaseConfigurationEditor.js","sections/@databases/@databases_view/DatabaseOverview.js","sections/@databases/@databases_view/TableViewer.js","sections/@databases/@databases_view/TableDataViewer.js","pages/databases/database_view/DatabaseView.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { Box, Link, Typography, Breadcrumbs as MUIBreadcrumbs } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nBreadcrumbs.propTypes = {\n  activeLast: PropTypes.bool,\n  links: PropTypes.array.isRequired,\n};\n\nexport default function Breadcrumbs({ links, activeLast = false, ...other }) {\n  const currentLink = links[links.length - 1].name;\n\n  const listDefault = links.map((link) => <LinkItem key={link.name} link={link} />);\n\n  const listActiveLast = links.map((link) => (\n    <div key={link.name}>\n      {link.name !== currentLink ? (\n        <LinkItem link={link} />\n      ) : (\n        <Typography\n          variant=\"body2\"\n          sx={{\n            maxWidth: 260,\n            overflow: 'hidden',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {currentLink}\n        </Typography>\n      )}\n    </div>\n  ));\n\n  return (\n    <MUIBreadcrumbs\n      separator={<Box component=\"span\" sx={{ width: 4, height: 4, borderRadius: '50%', bgcolor: 'text.disabled' }} />}\n      {...other}\n    >\n      {activeLast ? listDefault : listActiveLast}\n    </MUIBreadcrumbs>\n  );\n}\n\n// ----------------------------------------------------------------------\n\nLinkItem.propTypes = {\n  link: PropTypes.shape({\n    href: PropTypes.string,\n    icon: PropTypes.any,\n    name: PropTypes.string,\n  }),\n};\n\nfunction LinkItem({ link }) {\n  const { href, name, icon } = link;\n  return (\n    <Link\n      key={name}\n      variant=\"body2\"\n      component={RouterLink}\n      to={href || '#'}\n      sx={{\n        lineHeight: 2,\n        display: 'flex',\n        alignItems: 'center',\n        color: 'text.primary',\n        '& > div': { display: 'inherit' },\n      }}\n    >\n      {icon && <Box sx={{ mr: 1, '& svg': { width: 20, height: 20 } }}>{icon}</Box>}\n      {name}\n    </Link>\n  );\n}\n","import PropTypes from 'prop-types';\n// @mui\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport Breadcrumbs from './Breadcrumbs';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object,\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <Breadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {typeof moreLink === 'string' ? (\n          <Link href={moreLink} target=\"_blank\" rel=\"noopener\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link\n              noWrap\n              key={href}\n              href={href}\n              variant=\"body2\"\n              target=\"_blank\"\n              rel=\"noopener\"\n              sx={{ display: 'table' }}\n            >\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { Button, TextField, Grid, Paper } from \"@mui/material\"\n\nexport default function DatabaseConfigurationEditor({ config, onSave }) {\n\t// Assume `config` is an object containing configuration fields\n\t// and `onSave` is a function to save the edited configuration\n\n\treturn (\n\t\t<Paper sx={{ p: 2, height: \"100%\" }}>\n\t\t\t<Grid container spacing={2}>\n\t\t\t\t{Object.keys(config).map((key) => (\n\t\t\t\t\t<Grid item xs={12} sm={6} key={key}>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tlabel={key}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={config[key]}\n\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t/* Handle change */\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t))}\n\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={onSave}>\n\t\t\t\t\t\tSave Configuration\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Paper>\n\t)\n}\n","import { Card, CardContent, Typography, Button, Stack } from \"@mui/material\"\n\nexport default function DatabaseOverview({ details }) {\n\treturn (\n\t\t<Card sx={{ mb: 2, height: \"100%\" }}>\n\t\t\t<CardContent>\n\t\t\t\t<Typography variant=\"h5\" gutterBottom>\n\t\t\t\t\t{details.name}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Type: {details.type}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Status: {details.status}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Host: {details.host}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Port: {details.port}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Created: {details.createdDate}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\">Last Updated: {details.lastUpdated}</Typography>\n\t\t\t\t<Typography color=\"textSecondary\" sx={{ mb: 2 }}>\n\t\t\t\t\tDescription: {details.description}\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t</Card>\n\t)\n}\n","import React, { useState } from \"react\"\nimport {\n\tButton,\n\tDialog,\n\tDialogActions,\n\tDialogContent,\n\tDialogTitle,\n\tTextField,\n\tList,\n\tListItem,\n\tListItemIcon,\n\tListItemText,\n\tCollapse,\n\tPaper,\n\tIconButton,\n} from \"@mui/material\"\nimport { ExpandLess, ExpandMore, Folder, DataArray, AddBox, Edit, Delete } from \"@mui/icons-material\"\n\nconst initialTablesData = [\n\t{\n\t\tname: \"Users\",\n\t\tcolumns: [\n\t\t\t{ name: \"id\", type: \"integer\" },\n\t\t\t{ name: \"name\", type: \"varchar(255)\" },\n\t\t\t{ name: \"email\", type: \"varchar(255)\" },\n\t\t],\n\t},\n\t{\n\t\tname: \"Orders\",\n\t\tcolumns: [\n\t\t\t{ name: \"order_id\", type: \"integer\" },\n\t\t\t{ name: \"product_id\", type: \"integer\" },\n\t\t\t{ name: \"quantity\", type: \"integer\" },\n\t\t\t{ name: \"order_date\", type: \"date\" },\n\t\t],\n\t},\n\t{\n\t\tname: \"Products\",\n\t\tcolumns: [\n\t\t\t{ name: \"id\", type: \"integer\" },\n\t\t\t{ name: \"name\", type: \"varchar(255)\" },\n\t\t\t{ name: \"price\", type: \"numeric\" },\n\t\t\t{ name: \"stock_quantity\", type: \"integer\" },\n\t\t],\n\t},\n\t{\n\t\tname: \"ProductReviews\",\n\t\tcolumns: [\n\t\t\t{ name: \"review_id\", type: \"integer\" },\n\t\t\t{ name: \"product_id\", type: \"integer\" },\n\t\t\t{ name: \"author\", type: \"varchar(255)\" },\n\t\t\t{ name: \"review_text\", type: \"text\" },\n\t\t\t{ name: \"rating\", type: \"integer\" },\n\t\t],\n\t},\n\t// Add more tables as needed\n]\n\nexport default function DataViewer() {\n\tconst [tablesData, setTablesData] = useState(initialTablesData)\n\tconst [open, setOpen] = useState({})\n\tconst [isDialogOpen, setIsDialogOpen] = useState(false)\n\tconst [newTableName, setNewTableName] = useState(\"\")\n\n\tconst handleClick = (index) => {\n\t\tsetOpen({ ...open, [index]: !open[index] })\n\t}\n\n\tconst handleAddTable = () => {\n\t\tconst newTable = {\n\t\t\tname: newTableName,\n\t\t\tcolumns: [], // Initially empty\n\t\t}\n\t\tsetTablesData([...tablesData, newTable])\n\t\tsetIsDialogOpen(false)\n\t\tsetNewTableName(\"\")\n\t}\n\n\treturn (\n\t\t<Paper sx={{ bgcolor: \"grey.800\", color: \"grey.100\", height: \"100%\" }}>\n\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => setIsDialogOpen(true)} startIcon={<AddBox />}>\n\t\t\t\tAdd New Table\n\t\t\t</Button>\n\t\t\t<Dialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)}>\n\t\t\t\t<DialogTitle>Add New Table</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\tlabel=\"Table Name\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"standard\"\n\t\t\t\t\t\tvalue={newTableName}\n\t\t\t\t\t\tonChange={(e) => setNewTableName(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={() => setIsDialogOpen(false)}>Cancel</Button>\n\t\t\t\t\t<Button onClick={handleAddTable}>Add</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<List component=\"nav\" aria-labelledby=\"nested-list-subheader\" sx={{ color: \"grey.100\" }}>\n\t\t\t\t{tablesData.map((table, index) => (\n\t\t\t\t\t<React.Fragment key={table.name}>\n\t\t\t\t\t\t<ListItem button onClick={() => handleClick(index)}>\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<Folder color=\"primary\" />\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t<ListItemText primary={table.name} />\n\t\t\t\t\t\t\t{open[index] ? <ExpandLess /> : <ExpandMore />}\n\t\t\t\t\t\t\t{/* Place buttons for editing and deleting tables here */}\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t<Collapse in={open[index]} timeout=\"auto\" unmountOnExit>\n\t\t\t\t\t\t\t<List component=\"div\" disablePadding>\n\t\t\t\t\t\t\t\t{table.columns.map((column, columnIndex) => (\n\t\t\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\t\t\tkey={`${table.name}-${columnIndex}`}\n\t\t\t\t\t\t\t\t\t\tsx={{ pl: 4, display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t\t\t\t<DataArray />\n\t\t\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t\t\t<ListItemText primary={column.name} />\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: \"grey.600\", borderRadius: \"10px\", padding: \"0.2em 0.5em\", color: \"grey.100\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{column.type}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{/* Icons for editing and deleting columns */}\n\t\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t))}\n\t\t\t</List>\n\t\t</Paper>\n\t)\n}\n","import * as React from \"react\"\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\"\nimport Button from \"@mui/material/Button\"\nimport Dialog from \"@mui/material/Dialog\"\nimport DialogActions from \"@mui/material/DialogActions\"\nimport DialogContent from \"@mui/material/DialogContent\"\nimport DialogTitle from \"@mui/material/DialogTitle\"\nimport TextField from \"@mui/material/TextField\"\n\nfunction CustomToolbar() {\n\treturn <GridToolbar>{/* Placeholder for custom toolbar actions */}</GridToolbar>\n}\n\nexport default function TableDataViewer() {\n\tconst [open, setOpen] = React.useState(false)\n\tconst [rows, setRows] = React.useState([\n\t\t{ id: 1, col1: \"Hello\", col2: \"World\" },\n\t\t// Add more rows as needed\n\t])\n\tconst [columns, setColumns] = React.useState([\n\t\t{ field: \"col1\", headerName: \"Column 1\", width: 150, editable: true },\n\t\t{ field: \"col2\", headerName: \"Column 2\", width: 150, editable: true },\n\t\t// Add more columns as needed\n\t])\n\n\tconst handleClose = () => {\n\t\tsetOpen(false)\n\t}\n\n\tconst handleAddColumn = (newColumnName) => {\n\t\tsetColumns([...columns, { field: newColumnName.toLowerCase(), headerName: newColumnName, width: 150, editable: true }])\n\t\thandleClose()\n\t}\n\n\tconst handleOpen = () => {\n\t\tsetOpen(true)\n\t}\n\n\tconst handleAddRow = () => {\n\t\tconst newRow = { id: rows.length + 1, col1: \"\", col2: \"\" }\n\t\tsetRows([...rows, newRow])\n\t}\n\n\treturn (\n\t\t<div style={{ height: \"600px\", width: \"100%\" }}>\n\t\t\t<Button onClick={handleOpen} color=\"primary\" variant=\"contained\" style={{ margin: 8 }}>\n\t\t\t\tAdd Column\n\t\t\t</Button>\n\t\t\t<Button onClick={handleAddRow} color=\"secondary\" variant=\"contained\" style={{ margin: 8 }}>\n\t\t\t\tAdd Row\n\t\t\t</Button>\n\t\t\t<DataGrid\n\t\t\t\trows={rows}\n\t\t\t\tcolumns={columns}\n\t\t\t\tpageSize={5}\n\t\t\t\trowsPerPageOptions={[5]}\n\t\t\t\tcheckboxSelection\n\t\t\t\tdisableSelectionOnClick\n\t\t\t\tcomponents={{\n\t\t\t\t\tToolbar: CustomToolbar,\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Dialog open={open} onClose={handleClose}>\n\t\t\t\t<DialogTitle>Add New Column</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\tlabel=\"Column Name\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\t\thandleAddColumn(e.target.value)\n\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleClose}>Cancel</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t</div>\n\t)\n}\n","import React, { useEffect, useState } from \"react\"\nimport { Container, Grid } from \"@mui/material\"\nimport { useParams } from \"react-router-dom\"\n\nimport { PATH_DASHBOARD } from \"../../../routes/paths\"\nimport Page from \"../../../components/Page\"\nimport HeaderBreadcrumbs from \"../../../components/HeaderBreadcrumbs\"\n\n// sections\nimport {\n\tTableDataViewer,\n\tTableViewer,\n\tQueryExecutor,\n\tDatabaseConfigurationEditor,\n\tDatabaseManagement,\n\tDatabaseOverview,\n} from \"../../../sections/@databases/@databases_view/index\"\n\nexport default function DatabaseView() {\n\tconst { databaseId } = useParams() // Extract the databaseId from URL\n\tconst [databaseDetails, setDatabaseDetails] = useState({\n\t\tname: \"Sample Database\",\n\t\ttype: \"SQL\",\n\t\tstatus: \"Online\",\n\t\thost: \"samplehost.com\",\n\t\tport: 5432,\n\t})\n\n\tconst [config, setConfig] = useState({\n\t\tconnectionString: \"Server=samplehost.com;Database=SampleDatabase;User Id=admin;Password=secret;\",\n\t\tmaxConnections: 100,\n\t\ttimeout: 30,\n\t})\n\n\tconst [tables, setTables] = useState([\n\t\t{ name: \"Users\", records: 1000 },\n\t\t{ name: \"Orders\", records: 500 },\n\t\t// Add more tables as needed\n\t])\n\n\tuseEffect(() => {\n\t\t// Simulate fetching database details\n\t\t// This is where you'd fetch and set details based on databaseId\n\t}, [databaseId])\n\n\treturn (\n\t\t<Page title={databaseDetails.name || \"OptiFlow\"}>\n\t\t\t<Container maxWidth=\"false\">\n\t\t\t\t<HeaderBreadcrumbs\n\t\t\t\t\theading={databaseDetails.name || \"Database\"}\n\t\t\t\t\tlinks={[\n\t\t\t\t\t\t{ name: \"Databases\", href: PATH_DASHBOARD.general.databases },\n\t\t\t\t\t\t...(databaseDetails.name ? [{ name: databaseDetails.name, href: \"\", isActive: true }] : []),\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={9} sx={{ height: \"100%\" }}>\n\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t{/* Top Left - Database Overview */}\n\t\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t\t<DatabaseOverview details={databaseDetails} />\n\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t{/* Top Middle - Database Configuration */}\n\t\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t\t<DatabaseConfigurationEditor config={config} onSave={() => {}} />\n\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t{/* Bottom left remaining cells - DataTable */}\n\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t<TableDataViewer />\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t{/* Right 3 cells - TableViewer */}\n\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t{/* Adjust the height as per your header/navbar height */}\n\t\t\t\t\t\t<TableViewer />\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Container>\n\t\t</Page>\n\t)\n}\n"],"names":["Breadcrumbs","links","activeLast","other","currentLink","length","name","listDefault","map","link","LinkItem","listActiveLast","Typography","variant","sx","maxWidth","overflow","whiteSpace","color","textOverflow","separator","Box","component","width","height","borderRadius","bgcolor","href","icon","Link","RouterLink","to","lineHeight","display","alignItems","mr","HeaderBreadcrumbs","action","heading","moreLink","mb","flexGrow","gutterBottom","flexShrink","mt","target","rel","noWrap","DatabaseConfigurationEditor","config","onSave","p","Grid","container","spacing","Object","keys","key","item","xs","sm","fullWidth","label","value","onChange","e","onClick","DatabaseOverview","details","Card","CardContent","type","status","host","port","createdDate","lastUpdated","description","initialTablesData","columns","DataViewer","useState","tablesData","setTablesData","open","setOpen","isDialogOpen","setIsDialogOpen","newTableName","setNewTableName","startIcon","AddBox","Dialog","onClose","DialogTitle","DialogContent","autoFocus","margin","id","DialogActions","newTable","List","table","index","ListItem","button","handleClick","ListItemIcon","Folder","ListItemText","primary","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","column","columnIndex","pl","justifyContent","DataArray","style","backgroundColor","padding","CustomToolbar","GridToolbar","TableDataViewer","React","col1","col2","rows","setRows","field","headerName","editable","setColumns","handleClose","newRow","DataGrid","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","components","Toolbar","onKeyDown","newColumnName","toLowerCase","preventDefault","DatabaseView","databaseId","useParams","databaseDetails","connectionString","maxConnections","records","useEffect","Page","title","Container","PATH_DASHBOARD","isActive"],"sourceRoot":""}