{"version":3,"file":"static/js/793.d7d93601.chunk.js","mappings":"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","sources":["sections/auth/verify-code/VerifyCodeForm.js","pages/auth/VerifyCode.js"],"sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\n// form\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Stack, OutlinedInput, FormHelperText } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport { FormProvider } from '../../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCodeForm() {\n  const navigate = useNavigate();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.string().required('Code is required'),\n    code2: Yup.string().required('Code is required'),\n    code3: Yup.string().required('Code is required'),\n    code4: Yup.string().required('Code is required'),\n    code5: Yup.string().required('Code is required'),\n    code6: Yup.string().required('Code is required'),\n  });\n\n  const defaultValues = {\n    code1: '',\n    code2: '',\n    code3: '',\n    code4: '',\n    code5: '',\n    code6: '',\n  };\n\n  const methods = useForm({\n    mode: 'all',\n    resolver: yupResolver(VerifyCodeSchema),\n    defaultValues,\n  });\n\n  const {\n    watch,\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting, errors },\n  } = methods;\n\n  const values = watch();\n\n  useEffect(() => {\n    const target = document.querySelector('input.field-code');\n\n    target?.addEventListener('paste', handlePaste);\n\n    return () => {\n      target?.removeEventListener('paste', handlePaste);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handlePaste = (event) => {\n    let data = event.clipboardData.getData('text');\n\n    data = data.split('');\n\n    [].forEach.call(document.querySelectorAll('.field-code'), (node, index) => {\n      node.value = data[index];\n\n      const fieldIndex = `code${index + 1}`;\n\n      setValue(fieldIndex, data[index]);\n    });\n\n    event.preventDefault();\n  };\n\n  const handleChangeWithNextField = (event, handleChange) => {\n    const { maxLength, value, name } = event.target;\n\n    const fieldIndex = name.replace('code', '');\n\n    const fieldIntIndex = Number(fieldIndex);\n\n    if (value.length >= maxLength) {\n      if (fieldIntIndex < 6) {\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\n\n        if (nextfield !== null) {\n          nextfield.focus();\n        }\n      }\n    }\n\n    handleChange(event);\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log('data', Object.values(data).join(''));\n\n      enqueueSnackbar('Verify success!');\n\n      navigate(PATH_DASHBOARD.root, { replace: true });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n          {Object.keys(values).map((name, index) => (\n            <Controller\n              key={name}\n              name={`code${index + 1}`}\n              control={control}\n              render={({ field, fieldState: { error } }) => (\n                <OutlinedInput\n                  {...field}\n                  error={!!error}\n                  autoFocus={index === 0}\n                  placeholder=\"-\"\n                  onChange={(event) => handleChangeWithNextField(event, field.onChange)}\n                  inputProps={{\n                    className: 'field-code',\n                    maxLength: 1,\n                    sx: {\n                      p: 0,\n                      textAlign: 'center',\n                      width: { xs: 36, sm: 56 },\n                      height: { xs: 36, sm: 56 },\n                    },\n                  }}\n                />\n              )}\n            />\n          ))}\n        </Stack>\n\n        {(!!errors.code1 || !!errors.code2 || !!errors.code3 || !!errors.code4 || !!errors.code5 || !!errors.code6) && (\n          <FormHelperText error sx={{ px: 2 }}>\n            Code is required\n          </FormHelperText>\n        )}\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\n          Verify\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// components\nimport Page from '../../components/Page';\n// sections\nimport { VerifyCodeForm } from '../../sections/auth/verify-code';\n\n// ----------------------------------------------------------------------\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  minHeight: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCode() {\n  return (\n    <Page title=\"Verify Code\">\n      <LogoOnlyLayout />\n\n      <Container>\n        <ContentStyle sx={{ textAlign: 'center' }}>\n          <Typography variant=\"h3\" paragraph>\n            Please check your email!\n          </Typography>\n\n          <Typography sx={{ color: 'text.secondary' }}>\n            We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify your\n            email.\n          </Typography>\n\n          <Box sx={{ mt: 5, mb: 3 }}>\n            <VerifyCodeForm />\n          </Box>\n\n          <Typography variant=\"body2\">\n            Donâ€™t have a code? &nbsp;\n            <Link variant=\"subtitle2\" onClick={() => {}}>\n              Resend code\n            </Link>\n          </Typography>\n        </ContentStyle>\n      </Container>\n    </Page>\n  );\n}\n"],"names":["VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","methods","useForm","mode","resolver","yupResolver","defaultValues","watch","control","setValue","handleSubmit","formState","isSubmitting","errors","values","useEffect","target","document","querySelector","addEventListener","handlePaste","removeEventListener","event","data","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","preventDefault","onSubmit","async","Promise","resolve","setTimeout","console","log","Object","join","PATH_DASHBOARD","replace","error","Stack","spacing","direction","justifyContent","keys","map","name","render","field","fieldState","OutlinedInput","autoFocus","placeholder","onChange","handleChange","maxLength","fieldIntIndex","Number","length","nextfield","focus","handleChangeWithNextField","inputProps","className","sx","p","textAlign","width","xs","sm","height","FormHelperText","px","LoadingButton","fullWidth","size","type","variant","loading","mt","ContentStyle","styled","theme","maxWidth","margin","minHeight","display","flexDirection","padding","VerifyCode","Page","title","LogoOnlyLayout","Container","Typography","paragraph","color","Box","mb","Link","onClick"],"sourceRoot":""}