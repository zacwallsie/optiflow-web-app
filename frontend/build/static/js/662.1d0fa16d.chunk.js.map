{"version":3,"file":"static/js/662.1d0fa16d.chunk.js","mappings":"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","sources":["sections/auth/new-password/NewPasswordForm.js","pages/auth/NewPassword.js"],"sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n// form\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n// @mui\nimport { Stack, IconButton, OutlinedInput, InputAdornment, FormHelperText } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// components\nimport Iconify from '../../../components/Iconify';\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function NewPasswordForm() {\n  const navigate = useNavigate();\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const emailRecovery = sessionStorage.getItem('email-recovery');\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.string().required('Code is required'),\n    code2: Yup.string().required('Code is required'),\n    code3: Yup.string().required('Code is required'),\n    code4: Yup.string().required('Code is required'),\n    code5: Yup.string().required('Code is required'),\n    code6: Yup.string().required('Code is required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n    confirmPassword: Yup.string()\n      .required('Confirm password is required')\n      .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n  });\n\n  const defaultValues = {\n    code1: '',\n    code2: '',\n    code3: '',\n    code4: '',\n    code5: '',\n    code6: '',\n    email: emailRecovery || '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const methods = useForm({\n    mode: 'all',\n    resolver: yupResolver(VerifyCodeSchema),\n    defaultValues,\n  });\n\n  const {\n    control,\n    setValue,\n    handleSubmit,\n    formState: { isSubmitting, errors },\n  } = methods;\n\n  useEffect(() => {\n    const target = document.querySelector('input.field-code');\n\n    target?.addEventListener('paste', handlePaste);\n\n    return () => {\n      target?.removeEventListener('paste', handlePaste);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handlePaste = (event) => {\n    let data = event.clipboardData.getData('text');\n\n    data = data.split('');\n\n    [].forEach.call(document.querySelectorAll('.field-code'), (node, index) => {\n      node.value = data[index];\n\n      const fieldIndex = `code${index + 1}`;\n\n      setValue(fieldIndex, data[index]);\n    });\n\n    event.preventDefault();\n  };\n\n  const handleChangeWithNextField = (event, handleChange) => {\n    const { maxLength, value, name } = event.target;\n\n    const fieldIndex = name.replace('code', '');\n\n    const fieldIntIndex = Number(fieldIndex);\n\n    if (value.length >= maxLength) {\n      if (fieldIntIndex < 6) {\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\n\n        if (nextfield !== null) {\n          nextfield.focus();\n        }\n      }\n    }\n\n    handleChange(event);\n  };\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log('data:', {\n        email: data.email,\n        code: `${data.code1}${data.code2}${data.code3}${data.code4}${data.code5}${data.code6}`,\n        password: data.password,\n      });\n\n      sessionStorage.removeItem('email-recovery');\n\n      enqueueSnackbar('Change password success!');\n\n      navigate(PATH_DASHBOARD.root, { replace: true });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <RHFTextField name=\"email\" label=\"Email\" disabled={!!emailRecovery} />\n\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n          {['code1', 'code2', 'code3', 'code4', 'code5', 'code6'].map((name, index) => (\n            <Controller\n              key={name}\n              name={`code${index + 1}`}\n              control={control}\n              render={({ field, fieldState: { error } }) => (\n                <OutlinedInput\n                  {...field}\n                  error={!!error}\n                  autoFocus={index === 0}\n                  placeholder=\"-\"\n                  onChange={(event) => handleChangeWithNextField(event, field.onChange)}\n                  inputProps={{\n                    className: 'field-code',\n                    maxLength: 1,\n                    sx: {\n                      p: 0,\n                      textAlign: 'center',\n                      width: { xs: 36, sm: 56 },\n                      height: { xs: 36, sm: 56 },\n                    },\n                  }}\n                />\n              )}\n            />\n          ))}\n        </Stack>\n\n        {(!!errors.code1 || !!errors.code2 || !!errors.code3 || !!errors.code4 || !!errors.code5 || !!errors.code6) && (\n          <FormHelperText error sx={{ px: 2 }}>\n            Code is required\n          </FormHelperText>\n        )}\n\n        <RHFTextField\n          name=\"password\"\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <RHFTextField\n          name=\"confirmPassword\"\n          label=\"Confirm New Password\"\n          type={showPassword ? 'text' : 'password'}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\n          Change password\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// components\nimport Page from '../../components/Page';\n// sections\nimport { NewPasswordForm } from '../../sections/auth/new-password';\n// assets\nimport { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst ContentStyle = styled('div')(({ theme }) => ({\n  maxWidth: 480,\n  margin: 'auto',\n  minHeight: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function NewPassword() {\n  return (\n    <Page title=\"New Password\">\n      <LogoOnlyLayout />\n\n      <Container>\n        <ContentStyle sx={{ textAlign: 'center' }}>\n          <SentIcon sx={{ mb: 5, mx: 'auto', height: 120 }} />\n\n          <Typography variant=\"h3\" gutterBottom>\n            Request sent successfully!\n          </Typography>\n\n          <Typography sx={{ color: 'text.secondary' }}>\n            We've sent a 6-digit confirmation email to your email.\n            <br />\n            Please enter the code in below box to verify your email.\n          </Typography>\n\n          <Box sx={{ mt: 5, mb: 3 }}>\n            <NewPasswordForm />\n          </Box>\n\n          <Typography variant=\"body2\">\n            Don’t have a code? &nbsp;\n            <Link variant=\"subtitle2\" onClick={() => {}}>\n              Resend code\n            </Link>\n          </Typography>\n        </ContentStyle>\n      </Container>\n    </Page>\n  );\n}\n"],"names":["NewPasswordForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","showPassword","setShowPassword","useState","emailRecovery","sessionStorage","getItem","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","email","password","min","confirmPassword","oneOf","defaultValues","methods","useForm","mode","resolver","yupResolver","control","setValue","handleSubmit","formState","isSubmitting","errors","useEffect","target","document","querySelector","addEventListener","handlePaste","removeEventListener","event","data","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","preventDefault","onSubmit","async","Promise","resolve","setTimeout","console","log","code","removeItem","PATH_DASHBOARD","replace","error","Stack","spacing","name","label","disabled","direction","justifyContent","map","render","field","fieldState","OutlinedInput","autoFocus","placeholder","onChange","handleChange","maxLength","fieldIntIndex","Number","length","nextfield","focus","handleChangeWithNextField","inputProps","className","sx","p","textAlign","width","xs","sm","height","FormHelperText","px","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Iconify","icon","LoadingButton","fullWidth","size","variant","loading","mt","ContentStyle","styled","theme","maxWidth","margin","minHeight","display","flexDirection","padding","NewPassword","Page","title","LogoOnlyLayout","Container","mb","mx","Typography","gutterBottom","color","Box","Link"],"sourceRoot":""}